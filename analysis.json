{
  "schema_version": "1.0.0",
  "classes": [
    {
      "description": "Navigator through object with treelike datastructure.",
      "summary": "",
      "path": "cosmoz-tree.js",
      "properties": [],
      "methods": [
        {
          "name": "getNodeByProperty",
          "description": "Should return the first node found.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 1
            },
            "end": {
              "line": 19,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "propertyName",
              "type": "String",
              "description": "(The name of the property the match should be based on. e.g. \"name\")"
            },
            {
              "name": "propertyValue",
              "type": "String",
              "description": "(The value of the property the match should be based on. e.g. \"Peter\")"
            },
            {
              "name": "exact",
              "type": "Boolean",
              "description": "(If the search should be executed exact or flaw. true wouldn't match \"Pet\")"
            },
            {
              "name": "nodeObj",
              "type": "Object",
              "description": "(The object the search should be based on.) or on default this._treeData"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The first found node"
          }
        },
        {
          "name": "getPathNodes",
          "description": "Should return the nodes on a given path.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 1
            },
            "end": {
              "line": 30,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathLocator",
              "type": "String",
              "description": "(The string which describes the path. e.g. \"1.2.9\")"
            },
            {
              "name": "nodeObj",
              "type": "Object",
              "description": "(The object the search should be based on.) Default: this._treeData"
            },
            {
              "name": "separatorSign",
              "type": "String",
              "description": "(The string which separates the path. e.g \".\") Default: \".\""
            }
          ],
          "return": {
            "type": "Array",
            "desc": "The node found"
          }
        },
        {
          "name": "getPathString",
          "description": "Returns a string which describes the path of a node (found by its path locator).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 1
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathLocator",
              "type": "String",
              "description": "(The string which describes the path. e.g. \"1.2.9\")"
            },
            {
              "name": "pathProperty",
              "type": "String",
              "description": "(The property of a node on which the path should be build on. e.g \"location\" if node = {\"location\": \"home\"})"
            },
            {
              "name": "pathSeparator",
              "type": "String",
              "description": "(The string the path should get separated with.)"
            },
            {
              "name": "separatorSign",
              "type": "String",
              "description": "(The string which separates the path. e.g \".\")"
            }
          ],
          "return": {
            "type": "String",
            "desc": "e.g. home/computer/desktop"
          }
        },
        {
          "name": "getPathStringByProperty",
          "description": "Should returns a string which describes the path of a node (found by a node's property and value).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 1
            },
            "end": {
              "line": 55,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "propertyName",
              "type": "String",
              "description": "(The name of the property the match should be based on. e.g. \"name\")"
            },
            {
              "name": "propertyValue",
              "type": "String",
              "description": "(The value of the property the match should be based on. e.g. \"Peter\")"
            },
            {
              "name": "pathProperty",
              "type": "String",
              "description": "(The property of a node on which the path should be build on. e.g \"location\" if node = {\"location\": \"home\"})"
            },
            {
              "name": "pathSeparator",
              "type": "String",
              "description": "(The string the path should get separated with.)"
            },
            {
              "name": "separatorSign",
              "type": "String",
              "description": "(The string which separates the path. e.g \".\")"
            }
          ],
          "return": {
            "type": "String",
            "desc": "e.g. home/computer/desktop"
          }
        },
        {
          "name": "getChildren",
          "description": "Should return the children of a node in form of an array.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 1
            },
            "end": {
              "line": 64,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "node",
              "description": "(The node of which the children should be returned of.)"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "The node's children"
          }
        },
        {
          "name": "hasChildren",
          "description": "Returns true if a node has children.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 1
            },
            "end": {
              "line": 73,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "node",
              "description": "(The node of which the children check should be applied on.)"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if node has children"
          }
        },
        {
          "name": "getProperty",
          "description": "Should return the value of a node's property.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 1
            },
            "end": {
              "line": 83,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "node",
              "description": "(The node of which the property value should be returned of.)"
            },
            {
              "name": "propertyName",
              "type": "String",
              "description": "(The name of the property. e.g. \"name\")"
            }
          ],
          "return": {
            "type": "(Array | Object | String)",
            "desc": "The value of the property"
          }
        },
        {
          "name": "nodeConformsSearch",
          "description": "Checks if a node matches the search criteria.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 1
            },
            "end": {
              "line": 106,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "node",
              "description": "(The node the check should be based on.)"
            },
            {
              "name": "propertyValue",
              "type": "String",
              "description": "(The value of the property the match should be based on. e.g. \"Peter\")"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "(Comparison options)"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if node matches"
          }
        },
        {
          "name": "search",
          "description": "Searches a (multi root) node and matches nodes based on a property and a value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 1
            },
            "end": {
              "line": 134,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "node",
              "description": "The node to search in."
            },
            {
              "name": "propertyValue",
              "type": "String",
              "description": "(The value of the property the match should be based on. e.g. \"Peter\")"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "(Search options)"
            },
            {
              "name": "results",
              "type": "Array",
              "defaultValue": "[]",
              "description": "(The array search results get added to.) Default: []"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "The nodes found"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 3,
          "column": 7
        },
        "end": {
          "line": 135,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "Tree"
    },
    {
      "description": "Navigator through object with treelike datastructure and default settings.",
      "summary": "",
      "path": "cosmoz-default-tree.js",
      "properties": [],
      "methods": [
        {
          "name": "getNodeByProperty",
          "description": "Searches a (multi root) node and matches nodes based on a property and a value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 1
            },
            "end": {
              "line": 72,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "propertyValue",
              "type": "String",
              "description": "(The value of the property the match should be based on. e.g. \"Peter\")"
            },
            {
              "name": "propertyName",
              "type": "String",
              "defaultValue": "this.searchProperty",
              "description": "(The name of the property the match should be based on. e.g. \"name\")"
            },
            {
              "name": "nodes",
              "type": "Array",
              "defaultValue": "this._roots",
              "description": "[this._roots] (The objects the search should be based on.)"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The first found node."
          }
        },
        {
          "name": "getPathNodes",
          "description": "Returns the nodes on a given path.\nA valid path 1.2.3 should return the items [1, 2, 3]\n- path 1.2.3.3 should return [1, 2, 3, undefined]\n- path 0.1.2.3 should return [1, 2, 3]\n- path 0.1.5.3 should return [1, undefined, undefined]",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 1
            },
            "end": {
              "line": 172,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathLocator",
              "type": "String",
              "description": "(The string which describes the path. e.g. \"1.2.9\")"
            },
            {
              "name": "nodeObj",
              "type": "Object",
              "description": "[this._treeData] (The object the search should be based on.)"
            },
            {
              "name": "pathLocatorSeparator",
              "type": "String",
              "description": "[this.pathLocatorSeparator] (The string which separates the path.)"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "The node array"
          }
        },
        {
          "name": "getPathString",
          "description": "Returns a string which describes the path of a node (found by its path locator).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 1
            },
            "end": {
              "line": 225,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathLocator",
              "type": "String",
              "description": "(The string which describes the path. e.g. \"1.2.9\")"
            },
            {
              "name": "pathProperty",
              "type": "String",
              "defaultValue": "this.searchProperty",
              "description": "(The property of a node on which the path should be build on. e.g \"location\" with node = {\"location\": \"home\", ..})"
            },
            {
              "name": "pathStringSeparator",
              "type": "String",
              "defaultValue": "this.pathStringSeparator",
              "description": "[this.pathStringSeparator] (The string the path should get separated with.)"
            },
            {
              "name": "pathLocatorSeparator",
              "type": "String",
              "defaultValue": "this.pathLocatorSeparator",
              "description": "[this.pathLocatorSeparator] (The string which separates the path segments of pathLocator.)"
            }
          ],
          "return": {
            "type": "String",
            "desc": "e.g. home/computer/desktop"
          }
        },
        {
          "name": "getPathStringByProperty",
          "description": "Returns a string which describes the path of a node (found by a node's property and value).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 236,
              "column": 1
            },
            "end": {
              "line": 256,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "propertyValue",
              "type": "String",
              "description": "(The value of the property the match should be based on. e.g. \"Peter\")"
            },
            {
              "name": "propertyName",
              "type": "String",
              "defaultValue": "this.searchProperty",
              "description": "(The name of the property the match should be based on. e.g. \"name\")"
            },
            {
              "name": "pathProperty",
              "type": "String",
              "defaultValue": "this.searchProperty",
              "description": "(The property of a node on which the path should be build on. e.g \"location\" if node = {\"location\": \"home\"})"
            },
            {
              "name": "pathStringSeparator",
              "type": "String",
              "defaultValue": "this.pathStringSeparator",
              "description": "[this.pathStringSeparator] (The string the path should get separated with.)"
            },
            {
              "name": "pathLocatorSeparator",
              "type": "String",
              "defaultValue": "this.pathLocatorSeparator",
              "description": "[this.pathLocatorSeparator] (The string which separates the path. e.g \".\")"
            }
          ],
          "return": {
            "type": "String",
            "desc": "e.g. home/computer/desktop"
          }
        },
        {
          "name": "getChildren",
          "description": "Returns an Object or an Array representing the children of a node.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 1
            },
            "end": {
              "line": 268,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Object",
              "description": "The object to return children from"
            }
          ],
          "return": {
            "type": "(Object | Array)",
            "desc": "The node's children"
          }
        },
        {
          "name": "hasChildren",
          "description": "Returns true if a node has children.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 1
            },
            "end": {
              "line": 281,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Object",
              "description": "The object to get children from"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if node has children"
          }
        },
        {
          "name": "getProperty",
          "description": "Returns the property of a Node based on a given property name.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 1
            },
            "end": {
              "line": 294,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Object",
              "description": "The object to get property from"
            },
            {
              "name": "propertyName",
              "type": "String",
              "description": "The name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "The value of the property"
          }
        },
        {
          "name": "nodeConformsSearch",
          "description": "Checks if a node matches the search criteria.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-tree.js",
            "start": {
              "line": 94,
              "column": 1
            },
            "end": {
              "line": 106,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "node",
              "description": "(The node the check should be based on.)"
            },
            {
              "name": "propertyValue",
              "type": "String",
              "description": "(The value of the property the match should be based on. e.g. \"Peter\")"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "(Comparison options)"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if node matches"
          },
          "inheritedFrom": "Tree"
        },
        {
          "name": "search",
          "description": "Searches a (multi root) node and matches nodes based on a property and a value.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-tree.js",
            "start": {
              "line": 118,
              "column": 1
            },
            "end": {
              "line": 134,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "node",
              "description": "The node to search in."
            },
            {
              "name": "propertyValue",
              "type": "String",
              "description": "(The value of the property the match should be based on. e.g. \"Peter\")"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "(Search options)"
            },
            {
              "name": "results",
              "type": "Array",
              "defaultValue": "[]",
              "description": "(The array search results get added to.) Default: []"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "The nodes found"
          },
          "inheritedFrom": "Tree"
        },
        {
          "name": "searchNodes",
          "description": "Searches a (multi root) node and matches nodes based on a property and a value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 1
            },
            "end": {
              "line": 89,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "propertyValue",
              "type": "String",
              "description": "(The value of the property the match should be based on. e.g. \"Peter\")"
            },
            {
              "name": "nodes",
              "type": "Object",
              "description": "[this._treeData] (The nodes the search should be based on.)"
            },
            {
              "name": "exact",
              "type": "Boolean",
              "description": "[true] (If the search should be executed exact or flaw. true wouldn't match \"Pet\")"
            },
            {
              "name": "propertyName",
              "type": "String",
              "defaultValue": "this.searchProperty",
              "description": "[this.searchProperty] (The name of the property the match should be based on. e.g. \"name\")"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "All found nodes."
          }
        },
        {
          "name": "findNode",
          "description": "Searches a (multi root) node and matches nodes based on a property and a value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 1
            },
            "end": {
              "line": 105,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "propertyValue",
              "type": "String",
              "description": "(The value of the property the match should be based on. e.g. \"Peter\")"
            },
            {
              "name": "propertyName",
              "type": "String",
              "defaultValue": "this.searchProperty",
              "description": "[this.searchProperty] (The name of the property the match should be based on. e.g. \"name\")"
            },
            {
              "name": "nodes",
              "type": "Object",
              "description": "[this._treeData] (The nodes the search should be based on.)"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The first found node."
          }
        },
        {
          "name": "_searchNodes",
          "description": "Searches a (multi root) node and matches nodes based on a property and a value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 1
            },
            "end": {
              "line": 126,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "propertyValue",
              "type": "String",
              "description": "(The value of the property the match should be based on. e.g. \"Peter\")"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "(Matching options)"
            },
            {
              "name": "nodes",
              "type": "Object",
              "defaultValue": "this._roots",
              "description": "[this._roots] (The nodes the search should be based on.)"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "The found node(s)."
          }
        },
        {
          "name": "getNodeByPathLocator",
          "description": "Returns the node of a given path.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 1
            },
            "end": {
              "line": 142,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathLocator",
              "type": "String",
              "description": "(The string which describes the path. e.g. \"1.2.9\")"
            },
            {
              "name": "nodeObj",
              "type": "Object",
              "defaultValue": "this._treeData",
              "description": "[this._treeData] (The object the search should be based on.)"
            },
            {
              "name": "pathLocatorSeparator",
              "type": "String",
              "defaultValue": "this.pathLocatorSeparator",
              "description": "[this.pathLocatorSeparator] (The string which separates the path. e.g \".\")"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The node object"
          }
        },
        {
          "name": "_getPathNodes",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 1
            },
            "end": {
              "line": 184,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathLocator"
            },
            {
              "name": "nodeObj"
            },
            {
              "name": "pathLocatorSeparator",
              "defaultValue": "this.pathLocatorSeparator"
            }
          ]
        },
        {
          "name": "_pathToNodes",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 1
            },
            "end": {
              "line": 199,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path"
            },
            {
              "name": "nodes"
            }
          ]
        }
      ],
      "staticMethods": [
        {
          "name": "_objectValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 1
            },
            "end": {
              "line": 33,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ]
        },
        {
          "name": "_sortPathNodes",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 1
            },
            "end": {
              "line": 57,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        }
      ],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 7,
          "column": 7
        },
        "end": {
          "line": 295,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "Tree",
      "name": "DefaultTree"
    }
  ]
}
